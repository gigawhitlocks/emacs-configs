#+TITLE: Ian's Emacs Stories and Scripts
#+AUTHOR: Ian Whitlock
* Custom Config and Travelogue
This file contains the configuration necessary to transform a GNU Emacs 26 installation on Linux or Mac OS X into my very own personalized, hand-crafted, artisanal programming and text-editing environment maintained for my own use, hopefully in a way that can remain maintainable for the ongoing future.

** Justification
Emacs is an abberation among modern software, and it is my favorite piece of software. It's actually ancient software, but it is still actively maintained and has an excited and crafty userbase as a community. It's a text editor on the surface, and certainly Emacs can be used fairly quickly (after following the tutorial) for basic text editing, and perhaps its author even thought of it as merely a text editor. But..

*** It's actually an interactive Lisp interpeter
It's really a text editor with a Lisp interpreter attached, and Lisp turns out to be especially good at parsing text and for building domain specific languages (DSLs) for adding functionality to the existing language. Now, it just so happens that this particular dialect of Lisp comes with a native GUI library -- Emacs itself -- that it understands natively.

Suddenly using the program and programming it become similar tasks. This is the brilliance of Emacs. "But I don't have time to program my editor!" Yeah, nobody really does, that's why this repository is open source (in case someone can use it) and it's why we lean heavily on third party packages.

But because Emacs is primarily written in Emacs Lisp, you can explore the source code of Emacs directly from the editor itself, edit it, and execute the new version and have it affect your current session at runtime.

Here's a trivial example. A new Emacs user does the tutorial and learns that ~M-x~ runs a command. One of the first ones they learn is ~find-file~. ~find-file~ queries the user for a file location and then opens that file in a new buffer and displays it in the current window. It's also accessible via ~C-x C-f~ by default. The same function is ~(find-file)~ in Emacs Lisp. Run with an argument, it won't query the user. Any action you can do interactively can be automated through Emacs Lisp. Because of this flexibility, the world of 3rd party packages is /awesome/.

Oh yeah, and then there's Org Mode. Learning Emacs is worth it just for Org Mode.

*** Org Mode
This configuration is written in Org syntax.

Org Mode is a display mode for content written in the Org markup language, which provides syntax for annotating the content similar to Markdown, as well as syntax for attaching metadata to the content so that it can be acted upon from Emacs Lisp or other languages, through an extension called Babel, which is often referred to as ~org-babel~. Org and Babel allow you to write prose alongside code and export ("tangle") it to source files or execute it interactively while writing the document and automatically include the results of execution alongside the code and commentary in the document.

Org Mode allows you to easily collapse heading subtrees, execute code blocks, edit code blocks in the native mode of the language present in the code block, and write software in the literate programming style, where there's more explanation and exposition than code, like this configuration.

** Featuring
My config features many 3rd party packages. I'd like to give special attention to some of my favorites

*** evil-mode
Bringing a sane editing experience to Emacs.

*** helm
Helm brings an awesome command UI to Emacs that completely alters the experience (for the better, in my opinion).

*** magit
The best ~git~ UI on the planet.

*** projectile
Allowing jumping around inside of version-controlled projects, searching, all kinds of goodies.

*** general
Sane key bindings.

*** which-key
Pops up a window to show available commands, given a prefix. Awesome for discoverability, which is essential for a platform as extensible as Emacs.

*** leuven-theme
Beautiful old-school light theme. Eventually I'll choose a dark theme to accompany this one.

* ~init.el~ Entrypoint
:properties:
:header-args: :tangle ~/.emacs.d/init.el :comments link
:end:

First of all there's ~init.el~. Emacs runs this file by default after it's done initializing the underlying system, so it's where our code traditionally goes. This file needs to be checked in so that there's something executable for Emacs to run when this repo is pulled down anew, so it can't be an ~org~ file. We need ~init.el~ to call ~org-babel-load-file~ on this file to turn it into a ~.el~ that we can load and execute.

So ~init.el~ just holds the bare minimum code. We use an [[https://orgmode.org/worg/org-contrib/babel/intro.html#literate-emacs-init][example from orgmode.org]] to load the Org files and tangle them. Then we ~require~ the output from the call to tangle, and run ~main~.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
  ;;; init --- the Emacs entrypoint
  ;;; Commentary:
  ;;;
  ;;; Just load my customizations and execute -- org-mode bootstrap from
  ;;; https://orgmode.org/worg/org-contrib/babel/intro.html#literate-emacs-init
  ;;;
  ;;; Code:
  ;; Load up Org Mode and (now included) Org Babel for elisp embedded in Org Mode files
  (setq dotfiles-dir (file-name-directory (or (buffer-file-name) load-file-name)))

  (let* ((org-dir (expand-file-name
                   "lisp" (expand-file-name
                           "org" (expand-file-name
                                  "src" dotfiles-dir))))
         (org-contrib-dir (expand-file-name
                           "lisp" (expand-file-name
                                   "contrib" (expand-file-name
                                              ".." org-dir))))
         (load-path (append (list org-dir org-contrib-dir)
                            (or load-path nil))))
    ;; load up Org-mode and Org-babel
    (require 'org-install)
    (require 'ob-tangle))

  ;; load up all literate org-mode files in this directory
  (mapc #'org-babel-load-file (directory-files dotfiles-dir t "\\.org$"))

  (require '~/.emacs.d/ian.el)
  (main)

  ;; Load automatic and interactive customizations from this computer
  (shell-command "touch ~/.emacs.d/.emacs-custom.el")
  (setq custom-file "~/.emacs.d/.emacs-custom.el")
  (load custom-file)
  (provide 'init)
#+END_SRC

The rest of the code that is executed begins with the routines defined by this file.

* My Customizations
:properties:
:header-args: :tangle yes :comments link :noweb yes
:end:

After running the ~init.el~ entrypoint, this file is tangled to ~ian.el~ and executed. Right now all configuration other than the entrypoint is in this file.

** Bootstrap

The bootstrap function sets up the main software repository for downloading 3rd party packages and a tool for managing installing those packages.

#+BEGIN_SRC emacs-lisp
  ;;; ian.el --- my custom emacs config with no one else considered because fuck you
  ;;;            naw but really I just don't have the time for that
  ;;;
  ;;; Commentary:
  ;;;
  ;;; After throwing away an old Emacs config, built when I had no idea what I was doing
  ;;; and abandoning the "wisdom of the crowds"-configured Spacemacs for better control
  ;;; here we are for better or worse
  ;;;
  ;;; Code:

  (defun bootstrap ()
    "Install use-package and melpa to prepare for installation of other packages."

    ;; manual PATH management
    (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
    (add-to-list 'exec-path "/usr/local/bin" t)

    (require 'package)
    ;; (add-to-list
    ;;  'package-archives
    ;;  '("melpa" . "http://melpa.org/packages/"))
    (setq package-archives
          '(("melpa" . "https://gitlab.com/d12frosted/elpa-mirror/raw/master/melpa/")
            ("org"   . "https://gitlab.com/d12frosted/elpa-mirror/raw/master/org/")
            ("gnu"   . "https://gitlab.com/d12frosted/elpa-mirror/raw/master/gnu/")))
    (package-initialize)

    ;; Now install use-package to enable us to use it
    ;; to manage the rest of our packages

    (unless (package-installed-p 'use-package)
      (progn
        (unless package-archive-contents
          (package-refresh-contents))
        (package-install 'use-package)))

    ;; set ensure to be the default
    (require 'use-package-ensure)
    (setq use-package-always-ensure t)

    ;; allow use-package to install system tools via apt, brew
    (use-package use-package-ensure-system-package)

    ;; sane keybindings from the start
    (use-package general)

    ;; hydra allows for sub-menus to pop up.. it's cool, and it's a dependency for sbt-hydra
    (use-package hydra)

    ;; these go in bootstrap because packages installed
    ;; with use-package use :diminish and :delight
    (use-package diminish)
    (use-package delight))
#+END_SRC

** Global Package Installation and Configuration
The ~global-packages~ function is responsible for installing deep dependencies. These are packages essential to my workflow.

#+BEGIN_SRC emacs-lisp
  (defun global-packages ()
    "Install and configure packages used with many modes and standalone modes and applications."
    (recentf-mode 1)
    (setq recentf-max-menu-items 25)
    (setq recentf-max-saved-items 25)

    (defun setup-projectile ()
      (use-package projectile
        :delight)
      (use-package helm-projectile)
      (projectile-mode +1))

    (defun setup-evil ()
      "Install and configure evil-mode and related bindings."
      (use-package evil
        :init
        (setq evil-want-keybinding nil)
        (setq evil-want-integration t)
        :config
        (evil-mode 1))

      (use-package evil-collection
        :after evil
        :config
        (evil-collection-init))

      ;; TODO probably org-mode dependencies will need to be their own function
      ;; bindings for org-mode
      (use-package evil-org)
      ;; image drag-and-drop for org-mode
      (use-package org-download)

      ;; add fd as a remap for esc
      (use-package evil-escape
        :delight)

      (evil-escape-mode 1)
      (setq-default evil-escape-key-sequence "fd"))

    (defun setup-magit ()
      (use-package magit)
      ;; disable the default emacs vc because git is all I use,
      ;; for I am a simple man
      (setq vc-handled-backends nil)
      (use-package evil-magit))

    ;; forge lets us interact with git forges e.g. GitHub, Gogs, Gitlab
    (use-package forge
      :after magit)
    ;; If you store the token in a file like ~/.authinfo, then note that auth-source’s parsing of that file is brittle.
    ;; Make sure the file ends with a newline character, that there are no empty or invalid lines, and that all comments are prefixed with #.

    (use-package which-key
      :delight
      :init
      (which-key-mode)
      (which-key-setup-minibuffer))


    (defun ansi ()
      ;; enable ANSI escape codes in compilation buffer
      (use-package ansi-color)
      ;; slightly modified from
      ;; https://endlessparentheses.com/ansi-colors-in-the-compilation-buffer-output.html
      (defun colorize-compilation ()
          "Colorize from `compilation-filter-start' to `point'."
          (let ((inhibit-read-only t))
          (ansi-color-apply-on-region
          compilation-filter-start (point))))

      (add-hook 'compilation-filter-hook
                #'colorize-compilation))
    (ansi)

    ;; anything so trivial that there is no config necessary goes here
    (defun extra-packages ()
      (use-package restart-emacs)
      (use-package yasnippet
        :delight)
      (use-package systemd)
      (use-package ranger)
      (use-package htmlize)
      (setq ranger-show-literal nil)
      ;; themes
      ;;(use-package color-theme-sanityinc-tomorrow)
      (use-package leuven-theme)
      (use-package centered-window)
      )

    ;; auto-completion
    (use-package company
      :delight
      :config
      ;; enable it everywhere
      (add-hook 'after-init-hook 'global-company-mode)

      ;; tab complete!
      (global-set-key "\t" 'company-complete-common))

    ;; linter
    (use-package flycheck
      :delight
      ;; enable it everywhere
      :init (global-flycheck-mode))

    ;; helm
    (defun setup-helm ()
      "Install and configure helm, the most important command and control center"
      (use-package helm
        :delight
        :config
        (global-set-key (kbd "M-x") #'helm-M-x)
        (define-key helm-find-files-map "\t" 'helm-execute-persistent-action)
        (setq helm-always-two-windows nil)
        (setq helm-default-display-buffer-functions '(display-buffer-in-side-window))
        (helm-mode 1)))

    ;; gnu hyperbole
    (use-package hyperbole
      :config
      )

    (setup-evil)
    (setup-projectile)
    (setup-magit)
    (setup-helm)
    (extra-packages))
#+END_SRC

** Language Configuration
*** General

#+BEGIN_SRC emacs-lisp
  (defun languages ()
    "Setup for specific programming languages."

    (defun setup-lsp ()
      "Enable nice rendering of diagnostics like compile errors."
      (use-package lsp-mode
        :init (setq lsp-prefer-flymake nil))

      (use-package lsp-ui
        :init (setq lsp-ui-doc-position 'bottom))

      (use-package helm-lsp)

      ;; Add lsp backend for other tools
      (use-package company-lsp)
      (use-package lsp-origami))
#+END_SRC

*** Scala

#+BEGIN_SRC emacs-lisp
    ;; snippet from https://scalameta.org/metals/docs/editors/emacs.html

    (defun scala ()
      "Enable scala-mode and sbt-mode."
      ;; workaround for lsp server problem
      ;; TODO see if the exec-path stuff fixed this
      ;; (setq lsp-scala-server-command "/usr/local/bin/metals-emacs")

      ;; this was taken from the install instructions 4/24/2019
      (use-package scala-mode
        :mode "\\.s\\(cala\\|bt\\)$")

      (use-package sbt-mode
        :commands sbt-start sbt-command
        :config
        ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
        ;; allows using SPACE when in the minibuffer
        (substitute-key-definition
         'minibuffer-complete-word
         'self-insert-command
         minibuffer-local-completion-map)
        (setq sbt:prefer-nested-projects t)
        (setq sbt:scroll-to-bottom-on-output t))


      (use-package lsp-mode
        ;; Optional - enable lsp-mode automatically in scala files
        :hook (scala-mode . lsp)
        :config (setq lsp-prefer-flymake nil)))

        ;; use-package lsp-ui and company-lsp are in setup-lsp are in General section

#+END_SRC

*** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC

*** Docker
#+BEGIN_SRC emacs-lisp
  (defun docker ()
    (use-package dockerfile-mode)
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
    (put 'dockerfile-image-name 'safe-local-variable #'stringp))
#+END_SRC

*** Python
#+BEGIN_SRC emacs-lisp
  (defun python ()

    (use-package auto-virtualenv)
    (add-hook 'python-mode-hook 'auto-virtualenv-set-virtualenv)

    (use-package anaconda-mode
      :config
      (add-hook 'python-mode-hook 'anaconda-mode)
      (add-hook 'python-mode-hook 'anaconda-eldoc-mode)))

#+END_SRC

*** Go
#+BEGIN_SRC emacs-lisp
  (defun go ()
    ;;

    ;; native go mode
    (use-package go-mode)
    (autoload 'go-mode "go-mode" nil t)
    (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))

    ;; autocompletion
    ;; https://github.com/mdempsky/gocode
    ;; and https://github.com/mdempsky/gocode/tree/master/emacs-company
    (use-package company-go)

    ;; disable auto-completion of non-Go things in Go files
    (add-hook 'go-mode-hook (lambda ()
                            (set (make-local-variable 'company-backends) '(company-go))
                            (company-mode)))

    ;; super important -- eldoc support adds things like type signatures in modeline
    (use-package go-eldoc)
    (add-hook 'go-mode-hook 'go-eldoc-setup)

    ;; gofmt before save
    (add-hook 'before-save-hook 'gofmt-before-save)


    (load-file "~/.emacs.d/vendor/go-dlv.el")
    (require 'go-dlv)
  
    ;; could always try gopls + lsp later
    )
#+END_SRC

*** Web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+END_SRC

*** Enable modes
#+BEGIN_SRC emacs-lisp
  (setup-lsp)
  (go)
  (python)
  (docker)
  (scala))
#+END_SRC
** Configuration Variables
*** Global Keybindings
#+BEGIN_SRC emacs-lisp
  (defun config ()
    "Global configuration variables and such."

    ;; override Home/End behavior to be more like modern applications
    (global-set-key (kbd "<home>") 'move-beginning-of-line)
    (global-set-key (kbd "<end>") 'move-end-of-line)

    (general-create-definer my-leader-def
      ;; :prefix my-leader
      :prefix "SPC")

    (general-create-definer my-local-leader-def
      ;; :prefix my-local-leader
      :prefix "SPC m")

    ;; global keybindings
    (my-leader-def
      :keymaps 'normal

      ;; buffer control
      "bb"	'switch-to-buffer
      "TAB"	'switch-to-prev-buffer
      "bd"	'evil-delete-buffer

      ;; compile
      "cc"        'compile

      ;; errors
      "ec"	'flycheck-clear
      "el"	'flycheck-list-errors
      "en"	'flycheck-next-error
      "ep"	'flycheck-previous-error

      "Fm"        'make-frame

      ;; hmm
      "ff"	'helm-find-files
      "fr"        'helm-recentf
      "fed"	'(lambda () (interactive)
                     (find-file "~/.emacs.d/ian.org"))

      "feD"	'(lambda () (interactive)
                     (find-file-other-frame "~/.emacs.d/ian.org"))
      "feR"	'(lambda () (interactive)
                     (org-babel-tangle "~/.emacs.d/ian.org")
                     (byte-compile-file "~/.emacs.d/ian.el"))

      ;; git
      "gb"	'magit-blame
      "gs"	'magit-status
      "gg"	'magit
      "gd"	'magit-diff

      ;; hyperbole
      "h"        'hyperbole
      ;; bookmarks (j for jump)
      "jj"	'bookmark-jump
      "js"	'bookmark-set
      "jo"        'org-babel-tangle-jump-to-org

      "ic"         'insert-char
      ;; projectile
      "p"	'projectile-command-map
      "pf"	'helm-projectile-find-file
      "sp"	'helm-projectile-ack

      ;; quitting
      "qq"	'save-buffers-kill-terminal
      "qr"	'restart-emacs

      ;; simple toggles
      "tn"	'linum-mode

      ;; window control
      "w-"	'split-window-below
      "w/"	'split-window-right
      "wj"	(lambda () (interactive)
                    (select-window (window-in-direction 'below)))
      "wk"	(lambda () (interactive)
                    (select-window (window-in-direction 'above)))
      "wh"	(lambda () (interactive)
                    (select-window (window-in-direction 'left)))
      "wl"	(lambda () (interactive)
                    (select-window (window-in-direction 'right)))
      "wd"	'delete-window
      "wD"	'delete-other-windows
      "wo"	'other-window
      "w="        'balance-windows

      ";"         'comment-line

      "SPC"	'helm-M-x
      )
    #+END_SRC
*** Mode-Local Keybindings
#+BEGIN_SRC emacs-lisp
  (my-local-leader-def 'normal emacs-lisp-mode-map
    "e" 'eval-last-sexp)

  (my-local-leader-def
    :states 'normal
    :keymaps 'org-mode-map
    "y" 'org-store-link
    "p" 'org-insert-link
    "x" 'org-babel-execute-src-block
    "e" 'org-edit-src-code)

#+END_SRC
*** Org Mode Settings
#+BEGIN_SRC emacs-lisp
  ;; Fontify the whole line for headings (with a background color).
  (setq org-fontify-whole-heading-line t)

  ;; disable the weird default editing window layout in org-mode
  ;; instead, just replace the current window with the editing one..
  (setq org-src-window-setup 'current-window)

  ;; indent and wrap long lines in Org
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)


  ;; enable execution of languages from Babel
  (org-babel-do-load-languages 'org-babel-load-languages
                               '(
                                 (shell . t)
                                 )
                               )

  ;; enable markdown export
  (eval-after-load "org"
    '(require 'ox-md nil t))
#+END_SRC

*** Misc Settings
#+BEGIN_SRC emacs-lisp
  ;; backups to /tmp
    (setq backup-directory-alist `(("." . "/tmp/.emacs-saves")))
    (setq backup-by-copying t)

    ;; load the best theme, leuven
    (load-theme 'leuven t)

    (diminish 'eldoc-mode)
    (diminish 'undo-tree-mode)
    (diminish 'auto-revert-mode)

    ;; less annoying bell (from emacs wiki)
    ;; flashes the modeline foreground
    (setq ring-bell-function
          (lambda ()
            (let ((orig-fg (face-foreground 'mode-line)))
              ;; change the flash color here
              ;; overrides themes :P
              ;; guess that's one way to do it
              (set-face-foreground 'mode-line "#F2804F")
              (run-with-idle-timer 0.1 nil
                                   (lambda (fg) (set-face-foreground 'mode-line fg))
                                   orig-fg))))

    ;; easily take gifs (if byzanz-record is available.. might only work in Linux? not tested)
    (defun gif-this-frame (duration)
      (interactive "sDuration: ")
      (start-process "emacs-to-gif" nil
                     "byzanz-record"
                     "-d" duration
                     "-w" (number-to-string (+ 5 (frame-pixel-width)))
                     "-h" (number-to-string (+ 50 (frame-pixel-height)))
                     "-x" (number-to-string (frame-parameter nil 'left))
                     "-y" (number-to-string (+ (frame-parameter nil 'top) 10))
                     (concat "~/emacs_gifs/" (format-time-string "%Y-%m-%dT%T") ".gif")))

    ;; remove extraneous window chrome
    (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
    (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (scroll-bar-mode -1)

    ;; turn off startup
    (setq inhibit-startup-screen t))

  (defun main()
    "Initialize everything!"
    (bootstrap)
    (global-packages)
    (languages)
    (config)
    (server-start))

  (provide '~/.emacs.d/ian.el)
       ;;; ian.el ends here
#+END_SRC

* Notes and Such
** TODO System-local settings
Include all ~.el~ files from the untracked folder ~local-variables/~ and run them as the final step.
This allows for customization at the end of the configuration for specific things that are dependent on the computer on which this config is being run. For instance, anything with sensitive details or URLs can be symlinked from a private repo to this one for inclusion in the config without sharing secrets with the whole Internet.

1) Ensure that ~local-variables/~ exists and create it if it does not.
2) Load anything that's in there -- be sure to fail sanely if there's nothing there!
3) That's it, there is no three.

** TODO Hyperbole
#+BEGIN_SRC
17:41 user1: is there a way to do the equivalent of C-x C-e on a #+INCLUDE: directive in Org?
17:46 user2: Of course: C-a C-c ' C-x h M-w M-x org-mark-ring-goto C-y C-k
17:51 user1: I could probably transform that string of commands into a Lisp function.. and then write an implicit button rule for Hyperbole so that I can shift+middle-click on an #+INCLUDE: directive and have it drop the contents of the file inside my org file..
17:52 user1: that'd be the correct behavior
#+END_SRC

** Monospace Fonts
Just going to keep note of some options

*** https://github.com/adobe-fonts/source-code-pro/tree/master
Default in Spacemacs

*** https://github.com/be5invis/Iosevka
Kinda tall, skinny

*** https://github.com/googlefonts/Inconsolata
Has ligatures

*** https://github.com/tonsky/FiraCode
More ligatures, but you have to Do Stuff in Emacs
https://github.com/tonsky/FiraCode/wiki/Emacs-instructions
Described as "cool" on IRC

*** https://github.com/source-foundry/Hack
I mean, it's called "Hack"

** Proportional Fonts
I don't want proportional fonts everywhere, but it'd be nice to have them in writing-focused modes like Org!
Xah Lee has an example where he does something similar to what I'd want [[http://ergoemacs.org/emacs/emacs_proportional_font.html]]

** ERC
This is something I'd like eventually. Maybe?
Here's a Reddit thread on the topic. [[https://www.reddit.com/r/emacs/comments/8ml6na/tip_how_to_make_erc_fun_to_use/]]

** Mail
Eventually.

** Emoji
https://github.com/iqbalansari/emacs-emojify
